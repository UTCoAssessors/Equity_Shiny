dplyr::select(-parcel_id) %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
pam_fit <- pam(gower_dist, diss = TRUE, k = 16)
pam_results <- Group_data %>%
dplyr::select(-parcel_id) %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
Group_data[pam_fit$medoids, ] %>% data.frame
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Group_data$parcel_id)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit$clustering
Group_clust <- cbind(Group_data,clus =  pam_fit$clustering)
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(clus) )) + geom_point()
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
Group_clust%>%
count(clus)
predict_pam = function(model,traindata,newdata){
nclus = length(model$id.med)
DM = daisy(rbind(traindata[model$id.med,],newdata),
metric="gower",
weights = c(4,1,.5,3,1.5),
type = list(logratio = 4))
max.col(-as.matrix(DM)[-c(1:nclus),1:nclus])
}
df <- readxl::read_xlsx('ComSales.xlsx') %>% janitor::clean_names()
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2022,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
ggplot2::ggplot(data = Sale_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(preds) )) + geom_point()
Group_data[pam_fit$medoids, ] %>% data.frame
Group_data %>%
group_by(occ_desc) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n)) %>% view
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = occ_desc, y =  gross_building_sq_ft)) + geom_point()
Group_data
gower_dist <- daisy(Group_data[,2:8],
metric = "gower",
weights = c(1,1,.5,1,1.5,5,5),
type = list(logratio = 4))
gower_mat <- as.matrix(gower_dist)
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = long, y = lat)) + ggplot2::geom_point()
Group_data[
which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
arr.ind = TRUE)[1, ], ]
Group_data[
which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]),
arr.ind = TRUE)[1, ], ]
sil_width <- c(NA)
for(i in 2:19){
pam_fit <- pam(gower_dist,
diss = TRUE,
k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:19, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:19, sil_width)
pam_fit <- pam(gower_dist, diss = TRUE, k = 16)
pam_fit <- pam(gower_dist, diss = TRUE, k = 10)
pam_results <- Group_data %>%
dplyr::select(-parcel_id) %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
Group_data[pam_fit$medoids, ] %>% data.frame
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Group_data$parcel_id)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit$clustering
Group_clust <- cbind(Group_data,clus =  pam_fit$clustering)
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit$clustering
Group_clust <- cbind(Group_data,clus =  pam_fit$clustering)
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
Group_clust%>%
count(clus)
Group_data[pam_fit$medoids, ] %>% data.frame
pam_results$the_summary
df <- readxl::read_xlsx('ComSales.xlsx') %>% janitor::clean_names()
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2022,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2018,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
ggplot2::ggplot(data = Sale_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(preds) )) + geom_point()
Sale_clust
a
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
gower_dist <- daisy(Group_data[,2:8],
metric = "gower",
weights = c(3,1,.5,1,2.5,5,5),
type = list(logratio = 4))
gower_mat <- as.matrix(gower_dist)
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = long, y = lat)) + ggplot2::geom_point()
Group_data[
which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
arr.ind = TRUE)[1, ], ]
Group_data[
which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]),
arr.ind = TRUE)[1, ], ]
sil_width <- c(NA)
for(i in 2:19){
pam_fit <- pam(gower_dist,
diss = TRUE,
k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:19, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:19, sil_width)
pam_fit <- pam(gower_dist, diss = TRUE, k = 10)
pam_results <- Group_data %>%
dplyr::select(-parcel_id) %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
Group_data[pam_fit$medoids, ] %>% data.frame
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Group_data$parcel_id)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit$clustering
Group_clust <- cbind(Group_data,clus =  pam_fit$clustering)
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
library(tidyverse)
library(cluster)
library(Rtsne)
Condo <- readxl::read_xlsx('Condo Data.xlsx') %>% janitor::clean_names()
Group_data <- Condo %>%
dplyr::left_join(XY) %>%
dplyr::filter(dplyr::between(long, -116, -100)) %>%
mutate( gross_building_sq_ft = bldg_sqft_allocation + bsmt_sqft_allocation + mezz_sqft_allocation) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config, long, lat) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
Group_data %>%
group_by(occ_desc) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n)) %>% view
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = occ_desc, y =  gross_building_sq_ft)) + geom_point()
Group_data
gower_dist <- daisy(Group_data[,2:8],
metric = "gower",
weights = c(1,1,1,1,1,5,5),
type = list(logratio = 4))
gower_mat <- as.matrix(gower_dist)
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = long, y = lat)) + ggplot2::geom_point()
Group_data[
which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
arr.ind = TRUE)[1, ], ]
Group_data[
which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]),
arr.ind = TRUE)[1, ], ]
sil_width <- c(NA)
for(i in 2:19){
pam_fit <- pam(gower_dist,
diss = TRUE,
k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:19, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:19, sil_width)
pam_fit <- pam(gower_dist, diss = TRUE, k = 10)
pam_results <- Group_data %>%
dplyr::select(-parcel_id) %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
Group_data[pam_fit$medoids, ] %>% data.frame
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Group_data$parcel_id)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit$clustering
Group_clust <- cbind(Group_data,clus =  pam_fit$clustering)
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
Group_clust%>%
count(clus)
predict_pam = function(model,traindata,newdata){
nclus = length(model$id.med)
DM = daisy(rbind(traindata[model$id.med,],newdata),
metric="gower",
weights = c(4,1,.5,3,1.5),
type = list(logratio = 4))
max.col(-as.matrix(DM)[-c(1:nclus),1:nclus])
}
df <- readxl::read_xlsx('ComSales.xlsx') %>% janitor::clean_names()
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2018,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
library(tidyverse)
library(cluster)
library(Rtsne)
Condo <- readxl::read_xlsx('Condo Data.xlsx') %>% janitor::clean_names()
Group_data <- Condo %>%
dplyr::left_join(XY) %>%
dplyr::filter(dplyr::between(long, -116, -100)) %>%
mutate( gross_building_sq_ft = bldg_sqft_allocation + bsmt_sqft_allocation + mezz_sqft_allocation) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config, long, lat) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
Group_data %>%
group_by(occ_desc) %>%
dplyr::summarise(n = n()) %>%
dplyr::mutate(freq = n / sum(n)) %>% view
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = occ_desc, y =  gross_building_sq_ft)) + geom_point()
Group_data
gower_dist <- daisy(Group_data[,2:8],
metric = "gower",
weights = c(1,1,.5,1,1.5,5,5),
type = list(logratio = 4))
gower_mat <- as.matrix(gower_dist)
ggplot2::ggplot(data = Group_data, mapping = ggplot2::aes(x = long, y = lat)) + ggplot2::geom_point()
Group_data[
which(gower_mat == min(gower_mat[gower_mat != min(gower_mat)]),
arr.ind = TRUE)[1, ], ]
Group_data[
which(gower_mat == max(gower_mat[gower_mat != max(gower_mat)]),
arr.ind = TRUE)[1, ], ]
sil_width <- c(NA)
for(i in 2:19){
pam_fit <- pam(gower_dist,
diss = TRUE,
k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:19, sil_width,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:19, sil_width)
pam_fit <- pam(gower_dist, diss = TRUE, k = 10)
pam_results <- Group_data %>%
dplyr::select(-parcel_id) %>%
mutate(cluster = pam_fit$clustering) %>%
group_by(cluster) %>%
do(the_summary = summary(.))
pam_results$the_summary
Group_data[pam_fit$medoids, ] %>% data.frame
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
name = Group_data$parcel_id)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit$clustering
Group_clust <- cbind(Group_data,clus =  pam_fit$clustering)
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
Group_clust%>%
count(clus)
predict_pam = function(model,traindata,newdata){
nclus = length(model$id.med)
DM = daisy(rbind(traindata[model$id.med,],newdata),
metric="gower",
weights = c(4,1,.5,3,1.5),
type = list(logratio = 4))
max.col(-as.matrix(DM)[-c(1:nclus),1:nclus])
}
df <- readxl::read_xlsx('ComSales.xlsx') %>% janitor::clean_names()
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2022,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2018,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
ggplot2::ggplot(data = Sale_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(preds) )) + geom_point()
Sale_clust %>% write.csv('Sales_clust.csv')
read.csv('Sales_clust.csv')
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2018,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config, long, lat) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
ggplot2::ggplot(data = Sale_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(preds) )) + geom_point()
Sale_clust %>% write.csv('Sales_clust.csv')
read.csv('Sales_clust.csv')
newdata <- df %>%
left_join(Group_data) %>%
dplyr::mutate(sold_year = lubridate::year(sale_date),
sold_month = lubridate::month(sale_date)) %>%
dplyr::mutate(yr_mon = sold_year + (sold_month - .5)/12  ) %>%
dplyr::filter(sold_year >= 2018,
property_county == "Utah" &
status == "Sold" &
sale_type == "Improved" &
account_type %in% c("Commercial", "COMMERCIAL") &
condo_pud %in% c("C", "c", "P")) %>%
select(parcel_id, occ_desc, year_built, gross_building_sq_ft, class, bldg_config, long, lat, sold_year, sold_month, yr_mon, sale_list_price_adj) %>%
na.omit %>%
dplyr::mutate(occ_desc = as.factor(occ_desc),
class =as.factor(class),
bldg_config = as.factor(bldg_config))
preds <-predict_pam(model = pam_fit, traindata = Group_data[,2:6], newdata = newdata[,2:6])
Sale_clust <- cbind(newdata, preds = preds)
Sale_clust %>%
count(preds)
ggplot2::ggplot(data = Sale_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(preds) )) + geom_point()
Sale_clust %>% write.csv('Sales_clust.csv')
read.csv('Sales_clust.csv')
ggplot2::ggplot(data = Sales, mapping = ggplot2::aes(x = gross_building_sq_ft, y = sale_list_price_adj))
Sales <- read.csv('Sales_clust.csv')
ggplot2::ggplot(data = Sales, mapping = ggplot2::aes(x = gross_building_sq_ft, y = sale_list_price_adj))
ggplot2::ggplot(data = Sales, mapping = ggplot2::aes(x = gross_building_sq_ft, y = sale_list_price_adj)) +
ggplot2::geom_point()
ggplot2::ggplot(data = Sales, mapping = ggplot2::aes(x = gross_building_sq_ft, y = sale_list_price_adj)) +
ggplot2::geom_point() +
ggplot2::geom_smooth()
ggplot2::ggplot(data = Sales, mapping = ggplot2::aes(x = gross_building_sq_ft, y = sale_list_price_adj)) +
ggplot2::geom_point() +
ggplot2::geom_smooth(method = 'lm')
library(tidyverse)
library(cluster)
library(Rtsne)
ggplot2::ggplot(data = Sale_clust, mapping = ggplot2::aes(x= occ_desc, y = gross_building_sq_ft, col = as.factor(preds) )) + geom_point()
ggplot2::ggplot(data = Group_clust, mapping = ggplot2::aes(x= long, y = lat, col = as.factor(clus) )) + geom_point()
# List of project names; add to this vector and re-run this script
project_list <- c("Equity")
# build contents of each .Rproj file
Rproj_contents <- c("Version: 1.0","","RestoreWorkspace: Default","SaveWorkspace: Default",
"AlwaysSaveHistory: Default","","EnableCodeIndexing: Yes",
"UseSpacesForTab: Yes","NumSpacesForTab: 2","Encoding: UTF-8",
"","RnwWeave: Sweave","LaTeX: pdfLaTeX")
Rmd_header <- c("---","title: \"Untitled\"","output: ",
"  html_document:","    toc: true","    toc_depth: 3","    toc_float: true",
"    collapsed: false","    smooth_scroll: true","date: \"`r Sys.Date()`\"",
"---","",
"```{r setup, include=FALSE}",
"knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)",
"options(scipen=999)",
"library(tidyverse)","library(easystats)","library(Valuation)","library(modelr)",
"theme_set(theme_minimal())",
"```",
"","___","")
# If project doesn't exist already, add from list and fill in standard directory structure
for(i in project_list){
if(!dir.exists(i)){
dir.create(i) # create main directory for project
dir.create(file.path(i,"Data")) # add standardized sub-directories
dir.create(file.path(i,"R"))
dir.create(file.path(i,"Output"))
dir.create(file.path(i,"Reports"))
file.create(file.path(i,paste0(i,".Rproj"))) # Make an Rproj file
writeLines(Rproj_contents,file.path(i,paste0(i,".Rproj"))) # Add standard content to Rproj file
file.create(file.path(i,"R/01_Import_and_Clean.R")) # create blank R scripts
file.create(file.path(i,"R/02_Modeling.R"))
file.create(file.path(i,"R/03_Valuation.R"))
file.create(file.path(i,"Reports/01_Model_Assessment.Rmd")) # create blank rmd report
writeLines(Rmd_header,file.path(i,"Reports/01_Model_Assessment.Rmd")) # add custom header
}
}
source("~/GitHub/Equity_Shiny/01_Build_Standard_Project_Structure.R", echo=TRUE)
getwd()
getwd("C:/Users/DanielM/Documents/GitHub/Equity_shiny")
setwd("C:/Users/DanielM/Documents/GitHub/Equity_shiny")
source("~/GitHub/Equity_Shiny/01_Build_Standard_Project_Structure.R", echo=TRUE)
